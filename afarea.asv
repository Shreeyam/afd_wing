function area = afarea(psobj,tc,chord,cfrac)
% INPUT
%   psobj : polyshape object of airfoil, with unit chord length
%   tc    : thickness-to-chord ratio
%   chord : physical chord length (by default set to 1)
%   cfrac : fraction along chord length to integrate [0;1]

if nargin == 2
    chord = 1;
    cfrac = 1;
end

k = 1;
l = 1;
for i = 1:length(psobj.Vertices)-1
    if psobj.Vertices(i,1) <= psobj.Vertices(i+1,1)
        upper_x(k,1) = psobj.Vertices(i,1);
        upper_y(k,1) = psobj.Vertices(i,2);
        k = k + 1;
    else
        lower_x(l,1) = psobj.Vertices(i,1);
        lower_y(l,1) = psobj.Vertices(i,2);
        l = l+1;
    end
end
% reverse order of lower arrays
lower_x = flipud(lower_x);
lower_y = flipud(lower_y);

% interpolate functions as symbolic object
upper_p = polyfit(upper_x,upper_y,5);
lower_p = polyfit(lower_x,lower_y,5);

% create array to integrate
x_integrate = linspace(0,chord,100);
upper_y = polyval(upper_p,x_integrate);
lower_y = polyval(lower_p,x_integrate);
% shift airfoil upward to correct for +/- un
upper_y = upper_y + 10;


% integrate


end